#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('3afini:server');
var http = require('http');
const { Server } = require('socket.io');
const Messages = require('../models/Messages');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"],
  },
});
global.io = io;
io.on("connection", (socket) => {
  console.log(`User Connected: ${socket.id}`);

  socket.on("send_notification", (data) => {
    socket.broadcast.emit("receive_notification", data);
  });

  socket.on("joinRoom", async ({ room }) => {
    let message = await Messages.findOne({room});
    if (!message) {
      message = new Messages({
        room,
        messages:[]
      });
    } 
    socket.join(room);
    io.to(room).emit("messages", message.messages);

  });

  socket.on("chatMessage", async ({msg,userId,room}) => {
    let messages = await Messages.findByIdAndUpdate({room}, { $push: { messages: {message:msg,userId} } })

    io.to(room).emit("message", {message:msg,userId});
  });

  // Runs when client disconnects
  socket.on("disconnect", () => {
      console.log("User Disconnected",socket.id);
  });

});
server.listen(port ,()=>{
  console.log(`App running on port ${app.get('port')}`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
